# Install dependencies only when needed
FROM node:20-alpine AS base
FROM base AS deps

# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3 
# to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app
RUN apk add --no-cache python3 py3-pip make g++

# Install dependencies based on the preferred package manager
COPY --link package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
COPY .npmrc .npmrc
# Add the npm token for authentication
ARG NEXT_PUBLIC_TIPTAP_PRO_TOKEN
RUN echo $NEXT_PUBLIC_TIPTAP_PRO_TOKEN
RUN echo "@tiptap-pro:registry=https://registry.tiptap.dev" > .npmrc && \
    echo "//registry.tiptap.dev/:_authToken=MPhwxisLMnmMYAH+dDSZyNQWXBD/cEfnJQnbO/SVlFA6TjOZ1wIJGbFzt7S5aifJ" >> .npmrc

RUN \
    if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
    elif [ -f package-lock.json ]; then npm ci; \
    elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
    else echo "Lockfile not found." && exit 1; \
    fi

# 2. Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps --link /app/node_modules ./node_modules
COPY --link . .
# This will do the trick, use the corresponding env file for each environment.
COPY --link .env.development .env.production
RUN npm install
RUN npm run build

# 3. Development image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=development

RUN \
    addgroup -g 1001 -S nodejs; \
    adduser -S nextjs -u 1001

COPY --from=builder --link /app/public ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --link --chown=1001:1001 /app/.next/standalone ./
COPY --from=builder --link --chown=1001:1001 /app/.next/static ./.next/static

USER nextjs

EXPOSE $PORT


CMD ["node", "server.js"]

